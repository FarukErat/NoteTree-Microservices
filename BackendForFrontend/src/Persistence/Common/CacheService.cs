using Application.Interfaces.Persistence;
using Application.Models;
using Redis.OM.Searching;
using Redis.OM;

namespace Persistence.Common;

public class CacheService : ICacheService
{
    private readonly IRedisCollection<Session> _sessions;

    public CacheService()
    {
        RedisConnectionProvider provider = new(Configurations.ConnectionStrings.Redis);
        provider.Connection.CreateIndex(typeof(Session));
        _sessions = provider.RedisCollection<Session>();
    }

    public async Task<string> SaveSessionAsync(Session session)
    {
        session.Id = null; // will be generated by Redis
        return (await _sessions
            .InsertAsync(session, session.ExpireAt - DateTime.UtcNow))
            .Split(':')[1];
    }

    public async Task<Session?> GetSessionByIdAsync(string sessionId)
    {
        return await _sessions
            .FindByIdAsync(sessionId);
    }

    public async Task<Session?> GetSessionByUserIdAsync(Guid userId)
    {
        return await _sessions
            .Where(
                x => x.UserId == userId)
            .FirstOrDefaultAsync();
    }

    public async Task UpdateSessionByIdAsync(string sessionId, Session session)
    {
        session.Id = sessionId; // for clarity
        await _sessions.UpdateAsync(session);
    }

    public async Task DeleteSessionByIdAsync(string sessionId)
    {
        Session? session = await _sessions.FindByIdAsync(sessionId);
        if (session is not null)
        {
            await _sessions.DeleteAsync(session);
        }
    }
}
